import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os

class InventoryManager:
    def __init__(self):
        self.products = {}
        self.load_data()

    def load_data(self):
        if os.path.exists('products.txt'):
            with open('products.txt', 'r') as file:
                self.products = json.load(file)

    def save_data(self):
        with open('products.txt', 'w') as file:
            json.dump(self.products, file)

    def add_product(self, name, quantity, price):
        if name in self.products:
            messagebox.showerror("Error", "Product already exists.")
            return
        self.products[name] = {'quantity': quantity, 'price': price}
        self.save_data()
        messagebox.showinfo("Success", "Product added successfully.")

    def edit_product(self, name, quantity, price):
        if name not in self.products:
            messagebox.showerror("Error", "Product not found.")
            return
        self.products[name] = {'quantity': quantity, 'price': price}
        self.save_data()
        messagebox.showinfo("Success", "Product updated successfully.")

    def delete_product(self, name):
        if name not in self.products:
            messagebox.showerror("Error", "Product not found.")
            return
        del self.products[name]
        self.save_data()
        messagebox.showinfo("Success", "Product deleted successfully.")

    def generate_report(self):
        low_stock = {name: details for name, details in self.products.items() if details['quantity'] < 5}
        report = "Low Stock Products:\n"
        for name, details in low_stock.items():
            report += f"{name}: {details['quantity']} in stock\n"
        if not low_stock:
            report = "No low stock products."
        messagebox.showinfo("Low Stock Report", report)

class InventoryApp:
    def __init__(self, root):
        self.manager = InventoryManager()
        self.root = root
        self.root.title("Inventory Management System")

        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="Product Name").grid(row=0, column=0)
        tk.Label(self.root, text="Quantity").grid(row=1, column=0)
        tk.Label(self.root, text="Price").grid(row=2, column=0)

        self.product_name = tk.Entry(self.root)
        self.product_quantity = tk.Entry(self.root)
        self.product_price = tk.Entry(self.root)

        self.product_name.grid(row=0, column=1)
        self.product_quantity.grid(row=1, column=1)
        self.product_price.grid(row=2, column=1)

        tk.Button(self.root, text="Add Product", command=self.add_product).grid(row=3, column=0)
        tk.Button(self.root, text="Edit Product", command=self.edit_product).grid(row=3, column=1)
        tk.Button(self.root, text="Delete Product", command=self.delete_product).grid(row=4, column=0)
        tk.Button(self.root, text="Generate Report", command=self.generate_report).grid(row=4, column=1)

    def add_product(self):
        name = self.product_name.get()
        try:
            quantity = int(self.product_quantity.get())
            price = float(self.product_price.get())
            self.manager.add_product(name, quantity, price)
        except ValueError:
            messagebox.showerror("Error", "Invalid quantity or price.")

    def edit_product(self):
        name = self.product_name.get()
        try:
            quantity = int(self.product_quantity.get())
            price = float(self.product_price.get())
            self.manager.edit_product(name, quantity, price)
        except ValueError:
            messagebox.showerror("Error", "Invalid quantity or price.")

    def delete_product(self):
        name = self.product_name.get()
        self.manager.delete_product(name)

    def generate_report(self):
        self.manager.generate_report()

if __name__ == "__main__":
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()
